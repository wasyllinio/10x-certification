---
globs: frontend/*
alwaysApply: false
---

# AI Rules for 10x-certificaton/frontend

## Tech Stack

- Angular 20
- PrimeNG 21
- PrimeIcons 7

## Coding practices

### Guidelines for ANGULAR

#### ANGULAR_CODING_STANDARDS

- Use standalone components, directives, and pipes instead of NgModules
- Implement signals for state management instead of traditional RxJS-based approaches
- Use the new inject function instead of constructor injection
- Implement control flow with @if, @for, and @switch instead of *ngIf, *ngFor, etc.
- Leverage functional guards and resolvers instead of class-based ones
- Use the new deferrable views for improved loading states
- Implement OnPush change detection strategy for improved performance
- Use TypeScript decorators with explicit visibility modifiers (public, private)
- Leverage Angular CLI for schematics and code generation
- Implement proper lazy loading with loadComponent and loadChildren


### Guidelines for clean code

- Prioritize error handling and edge cases
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.


### Guidelines for Styling

#### PrimeNG

- Use PrimeNG components for UI elements (buttons, forms, data tables, etc.)
- Leverage PrimeIcons for consistent iconography throughout the application
- Utilize the Aura theme preset with providePrimeNG() in app.config.ts
- Implement dark mode by toggling the `.p-dark` class on the `<html>` element
- Use CSS variables for customizing component styles (e.g., `--p-primary-color`)
- Take advantage of the theme API for dynamic theme switching
- Follow PrimeNG's component API documentation for styling options
- Use ripple effects and animations consistently for better UX
